{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Emfrp",
	"patterns": [
		{ "include": "#comments" },
		{ "include": "#embedded-commands" },
		{ "include": "#toplevels" },
		{ "include": "#node-decorators" },
		{ "include": "#controls" },
		{ "include": "#operators" },
		{ "include": "#literals" }
	],
	"repository": {
		"comments": {
			"begin": "(?<!#)#(?![@-])",
			"end": "(?=$)",
			"name": "comment.line.number-sign.emfrp"
		},
		"embedded-commands": {
			"begin": "(?<!#)(#[@-])",
			"end": "(?=$)",
			"beginCaptures": {
				"1": { "name": "punctuation.command.start.emfrp" }
			},
			"name": "meta.declaration.command.emfrp"
		},
		"toplevels": {
			"patterns": [
				{ "include": "#module-def" },
				{ "include": "#input-def" },
				{ "include": "#output-def" },
				{ "include": "#use-materials" },
				{ "include": "#data-def" },
				{ "include": "#func-def" },
				{ "include": "#node-def" },
				{ "include": "#type-def" },
				{ "include": "#infix-def" },
				{ "include": "#primtype-def" },
				{ "include": "#primfunc-def" },
				{ "include": "#newnode-def" }
			],
			"repository": {
				"module-def": {
					"match": "\\b(module)\\b",
					"captures": {
						"1": { "name": "keyword.other.module.emfrp" }
					}
				},
				"input-def": {
					"match": "\\b(in)\\b",
					"captures": {
						"1": { "name": "keyword.other.input.emfrp" }
					}
				},
				"output-def": {
					"match": "\\b(out)\\b",
					"captures": {
						"1": { "name": "keyword.other.output.emfrp" }
					}
				},
				"use-materials": {
					"match": "\\b(use)\\b",
					"captures": {
						"1": { "name": "keyword.other.use.emfrp" }
					}
				},
				"data-def": {
					"match": "\\b(data)\\b",
					"captures": {
						"1": { "name": "keyword.other.data.emfrp" }
					}
				},
				"func-def": {
					"match": "\\b(func)\\b",
					"captures": {
						"1": { "name": "keyword.other.func.emfrp" }
					}
				},
				"node-def": {
					"match": "\\b(node)\\b",
					"captures": {
						"1": { "name": "keyword.other.node.emfrp" }
					}
				},
				"type-def": {
					"match": "\\b(type)\\b",
					"captures": {
						"1": { "name": "keyword.other.type.emfrp" }
					}
				},
				"infix-def": {
					"match": "\\b(infix[lr]?)\\b",
					"captures": {
						"1": { "name": "keyword.other.infix.emfrp" }
					}
				},
				"primtype-def": {
					"match": "\\b(primtype)\\b",
					"captures": {
						"1": { "name": "keyword.other.primtype.emfrp" }
					}
				},
				"primfunc-def": {
					"match": "\\b(primfunc)\\b",
					"captures": {
						"1": { "name": "keyword.other.primfunc.emfrp" }
					}
				},
				"newnode-def": {
					"match": "\\b(newnode)\\b",
					"captures": {
						"1": { "name": "keyword.other.newnode.emfrp" }
					}
				}
			}
		},
		"node-decorators": {
			"patterns": [
				{ "include": "#initial-value" },
				{ "include": "#from-dependency" },
				{ "include": "#as-alias" }
			],
			"repository": {
				"initial-value": {
					"begin": "\\b(init)\\s*\\[",
					"end": "\\]",
					"beginCaptures": {
						"1": { "name": "keyword.other.init.emfrp" }
					},
					"patterns": [
						{ "include": "#literals" },
						{ "include": "#operators" }
					]
				},
				"from-dependency": {
					"begin": "\\b(from)\\[",
					"end": "\\]",
					"beginCaptures": {
						"1": { "name": "keyword.other.from.emfrp" }
					},
					"patterns": [
						{ "include": "#as-alias" },
						{ "include": "#operators" }
					]
				},
				"as-alias": {
					"match": "\\b(as)\\b",
					"captures": {
						"1": { "name": "keyword.other.as.emfrp" }
					}
				}
			}
		},
		"controls": {
			"patterns": [
				{ "include": "#if-expression" },
				{ "include": "#pattern-match" }
			],
			"repository": {
				"if-expression": {
					"match": "\\b(if|then|else)\\b",
					"captures": {
						"1": { "name": "keyword.control.if.emfrp" }
					}
				},
				"pattern-match": {
					"match": "\\b(of)(\\:)?",
					"captures": {
						"1": { "name": "keyword.control.of.emfrp" },
						"2": { "name": "keyword.operator.of.emfrp" }
					}
				}
			}
		},
		"operators": {
			"patterns": [
				{ "include": "#at-last" },
				{
					"match": "[!#$%&*+./<=>?@\\\\^|\\-~]+|`[a-z][A-Za-z0-9_]*`",
					"name": "keyword.operator.emfrp"
				}
			],
			"repository": {
				"at-last": {
					"match": "(?<=[A-Za-z0-9_])(@last)\\b",
					"captures": {
						"1": { "name": "keyword.operator.atlast.emfrp" }
					}
				}
			}
		},
		"literals": {
			"patterns": [
				{ "include": "#char-literals" },
				{ "include": "#integral-literals" },
				{ "include": "#floating-literals" }
			],
			"repository": {
				"char-literals": {
					"match": "'(?:(\\\\.)|[^\\\\'])'",
					"name": "string.quoted.single.emfrp",
					"captures": {
						"1": { "name": "constant.character.escape.emfrp" }
					}
				},
				"integral-literals": {
					"match": "(?<![A-Za-z0-9_.])(?:0|[1-9][0-9]*)(?![A-Za-z0-9_.])",
					"name": "constant.numeric.integer.emfrp"
				},
				"floating-literals": {
					"match": "(?<![A-Za-z0-9_.])(?:0|[1-9][0-9]*)\\.[0-9]+(?![A-Za-z0-9_.])",
					"name": "constant.numeric.float.emfrp"
				}
			}
		}
	},
	"scopeName": "source.mfrp"
}
